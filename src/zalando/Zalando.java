package zalando;

import java.beans.XMLDecoder;
import java.beans.XMLEncoder;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * Klasa głównego okna programu.
 */
public class Zalando extends javax.swing.JFrame {   
    private static Dodaj oknoProduktu;
    private static Szukaj wyszukiwarka;
    private static DefaultTableModel model = new DefaultTableModel(); //model tabeli
    private static ArrayList <Boolean> listaID = new ArrayList<>(); //utworzenie listy ID
    private static HashMap <Integer, Produkt> produkty = new HashMap <>(); //utworzenie mapy Produktów    

    /**
     * Konstruktor głównego okna programu.
     */
    public Zalando() {
        initComponents();
        czyscTemp();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooserOtwórz = new javax.swing.JFileChooser();
        jFileChooserZapisz = new javax.swing.JFileChooser();
        jDialog1 = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar2 = new javax.swing.JMenuBar();
        plikMenu = new javax.swing.JMenu();
        otworzMenuItem = new javax.swing.JMenuItem();
        zapiszMenuItem = new javax.swing.JMenuItem();
        dodajMenu = new javax.swing.JMenu();
        obuwieMenuItem = new javax.swing.JMenuItem();
        spodnieMenuItem = new javax.swing.JMenuItem();
        koszuleMenu = new javax.swing.JMenu();
        tshirtMenuItem = new javax.swing.JMenuItem();
        eleganckaMenuItem = new javax.swing.JMenuItem();
        kurtkaMenuItem = new javax.swing.JMenuItem();
        edytujMenu = new javax.swing.JMenu();
        edytujMenuItem = new javax.swing.JMenuItem();
        usunMenuItem = new javax.swing.JMenuItem();
        szukajMenu = new javax.swing.JMenu();
        szukajMenuItem = new javax.swing.JMenuItem();

        jFileChooserOtwórz.setAcceptAllFileFilterUsed(false);
        jFileChooserOtwórz.setCurrentDirectory(null);

        jFileChooserZapisz.setAcceptAllFileFilterUsed(false);
        jFileChooserZapisz.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jFileChooserZapisz.setApproveButtonToolTipText("");
        jFileChooserZapisz.setCurrentDirectory(null);

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Zalando - Michał Hoja");
        setName("zalandoFrame"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(800, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTable1.setModel(model = new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] {"ID", "Typ", "Nazwa", "Cena", "Promocja"}
        )
        {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            };

        });
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(50);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(50);

            jTable1.getColumnModel().getColumn(1).setMinWidth(70);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(70);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(70);

            jTable1.getColumnModel().getColumn(3).setMinWidth(80);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(3).setMaxWidth(80);

            jTable1.getColumnModel().getColumn(4).setMinWidth(80);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(4).setMaxWidth(80);
        }
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        plikMenu.setText("Plik");

        otworzMenuItem.setText("Otwórz");
        otworzMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otworzMenuItemActionPerformed(evt);
            }
        });
        plikMenu.add(otworzMenuItem);

        zapiszMenuItem.setText("Zapisz");
        zapiszMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zapiszMenuItemActionPerformed(evt);
            }
        });
        plikMenu.add(zapiszMenuItem);

        jMenuBar2.add(plikMenu);

        dodajMenu.setText("Dodaj");

        obuwieMenuItem.setText("Obuwie");
        obuwieMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                obuwieMenuItemActionPerformed(evt);
            }
        });
        dodajMenu.add(obuwieMenuItem);

        spodnieMenuItem.setText("Spodnie");
        spodnieMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spodnieMenuItemActionPerformed(evt);
            }
        });
        dodajMenu.add(spodnieMenuItem);

        koszuleMenu.setText("Koszule");

        tshirtMenuItem.setText("T-Shirt");
        tshirtMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tshirtMenuItemActionPerformed(evt);
            }
        });
        koszuleMenu.add(tshirtMenuItem);

        eleganckaMenuItem.setText("Elegancka");
        eleganckaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eleganckaMenuItemActionPerformed(evt);
            }
        });
        koszuleMenu.add(eleganckaMenuItem);

        dodajMenu.add(koszuleMenu);

        kurtkaMenuItem.setText("Kurtka");
        kurtkaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kurtkaMenuItemActionPerformed(evt);
            }
        });
        dodajMenu.add(kurtkaMenuItem);

        jMenuBar2.add(dodajMenu);

        edytujMenu.setText("Edytuj");

        edytujMenuItem.setText("Edytuj zaznaczone");
        edytujMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edytujMenuItemActionPerformed(evt);
            }
        });
        edytujMenu.add(edytujMenuItem);

        usunMenuItem.setText("Usuń zaznaczone");
        usunMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usunMenuItemActionPerformed(evt);
            }
        });
        edytujMenu.add(usunMenuItem);

        jMenuBar2.add(edytujMenu);

        szukajMenu.setText("Szukaj");

        szukajMenuItem.setText("Szukaj po nazwie");
        szukajMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                szukajMenuItemActionPerformed(evt);
            }
        });
        szukajMenu.add(szukajMenuItem);

        jMenuBar2.add(szukajMenu);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metoda zapisuje produkty do pliku XML oraz zdjęcia do folderu o takiej samej nazwie.
     */
    public static void zapiszProdukty(){     
        File fileToSave = jFileChooserZapisz.getSelectedFile();
        String path = fileToSave.getAbsolutePath();
        String dir = null;
        if(!path.endsWith(".xml") ){
            dir = path;
            path += ".xml";
        } else {
            dir = path.substring(0, path.length()-4);
        }        
        try{
            //Zapis XML
            XMLEncoder encoder = new XMLEncoder(new BufferedOutputStream(
            new FileOutputStream(path)));
            encoder.writeObject(produkty);
            encoder.writeObject(listaID);
            encoder.close(); 
            System.out.println("Zapisano do pliku XML.");
            //Zapis zdjęc (przekopiowanie z temp) 
            String sciezkaTmp = new File("").getAbsolutePath()+"/temp/";  
            czyscFolder(dir);
            kopiujFolder(sciezkaTmp,dir);            
        } catch (Exception ex){
            System.err.println("Błąd zapisywania XML!");        
        }       
    }
    
    /**
     * Metoda kopiuje zawartość jednego folderu do drugiego.
     * @param source folder bazowy.
     * @param target folder docelowy.
     */
    public static void kopiujFolder(String source, String target){
        InputStream inStream;
        OutputStream outStream;
        try{
            File sourceFolder = new File(source); 
            File targetFolder = new File(target); 
            if (!targetFolder.exists()) new File(target).mkdir();
            String[] zawartosc = sourceFolder.list();
            for(String s: zawartosc){
                File currentFile = new File(sourceFolder.getPath(),s);
                inStream = new FileInputStream(currentFile);
                outStream = new FileOutputStream(targetFolder+"/"+s);
                byte[] buffer = new byte[1024];
                int length;        
                while ((length = inStream.read(buffer)) > 0){
                    outStream.write(buffer, 0, length);
                }        
                inStream.close();
                outStream.close();                
            }  
            System.out.println("Zapisano wszystkie zdjęcia.");
        } catch(IOException e){
            System.err.println("Błąd zapisywania zdjęć " + e);
        }
    }
    
    /**
     * Metoda wczytuje produkty z pliku XML oraz zdjęcia z folderu o takiej samej nzwie do folderu tymczasowego.
     */
    public static void wczytajProdukty(){  
        File fileToOpen = jFileChooserOtwórz.getSelectedFile();
        String path = fileToOpen.getAbsolutePath();
        try{           
            XMLDecoder decoder = new XMLDecoder(new BufferedInputStream(new FileInputStream(path)));
            produkty.clear();
            listaID.clear();
            produkty = (HashMap <Integer, Produkt>) decoder.readObject();    
            listaID = (ArrayList <Boolean>) decoder.readObject();            
            decoder.close();            
            wczytajTabele(); 
            //Odczyt zdjęć (przekopiowanie do temp)            
            String sciezkaTmp = new File("").getAbsolutePath()+"/temp/";  
            String dir = path.substring(0, path.length()-4);
            kopiujFolder(dir,sciezkaTmp);
            System.out.println("Wczytano zdjęcia.");
        } catch (Exception ex){
            System.err.println("Błąd wczytywania XML!");
        }       
    }
    
    /**
     * Metoda wczytuje szukane produkty do tabeli.
     * @param szukanaNazwa nazwa szukanego produktu.
     */
    public static void wczytajTabeleSzukaj(String szukanaNazwa){       
        String szukanaNazwaUpper = szukanaNazwa.toUpperCase();
        while (model.getRowCount() > 0){ //wyczyszczenie tabeli
            model.removeRow(0);
        }     
        for (Map.Entry <Integer, Produkt> entry : produkty.entrySet()){ //wczytanie produktów do tabeli           
            int id = entry.getKey();
            Produkt produkt = entry.getValue();
            float cenaPromocyjna = ustalCenePromocyjna(produkt);
            String rodzaj = ustalRodzaj(produkt);
            String nazwa = produkt.getNazwa();
            String nazwaUpper = nazwa.toUpperCase();
            float cena = produkt.getCena();  
            if (nazwaUpper.contains(szukanaNazwaUpper)) dodajWiersz(id, rodzaj, nazwa, cena, cenaPromocyjna); 
        }        
    }
    
    /**
     * Metoda wczytuje wszystkie produkty do tabeli.
     */
    public static void wczytajTabele(){
        while (model.getRowCount() > 0){ //wyczyszczenie tabeli
            model.removeRow(0);
        }    
        for (Map.Entry <Integer, Produkt> entry : produkty.entrySet()){ //wczytanie produktów do tabeli           
            int id = entry.getKey();
            Produkt produkt = entry.getValue();
            float cenaPromocyjna = ustalCenePromocyjna(produkt);
            String rodzaj = ustalRodzaj(produkt);
            String nazwa = produkt.getNazwa();
            float cena = produkt.getCena();            
            dodajWiersz(id, rodzaj, nazwa, cena, cenaPromocyjna); 
        }        
    }
    
    /**
     * Metoda ustala rodzaj produktu.
     * @param p produkt którego rodzaj chcemy określić.
     * @return rodzaj produktu.
     */
    private static String ustalRodzaj(Produkt p){
        String rodzaj = "?";
            if (p instanceof Obuwie){
                rodzaj = "Obuwie";                 
            } else if (p instanceof Spodnie){
                rodzaj = "Spodnie";               
            } else if (p instanceof Tshirt){
                rodzaj = "T-shirt";
            } else if (p instanceof Elegancka){
                rodzaj = "Elegancka";
            } else if (p instanceof Kurtka){
                rodzaj = "Kurtka";
            }
            return rodzaj;
    }
    
    /**
     * Metoda ustala cenę promocyjną produktu.
     * Tylko klasy implementujące interfejs wPromocji posiadają cenę promocyjną.
     * Pozostałe klasy zwracają wartość -1.
     * @param p produkt którego cenę promocyjną chcemy ustalić.
     * @return cena promocyjna.
     */
    private static float ustalCenePromocyjna(Produkt p){
        float CenaPromocyjna = -1;
            if (p instanceof Obuwie){
                CenaPromocyjna = ((Obuwie) p).getCenaPromocyjna();             
            } else if (p instanceof Spodnie){
                CenaPromocyjna = ((Spodnie) p).getCenaPromocyjna();   
            }
        return CenaPromocyjna;
    }
            
    
    /**
     * Metoda dodaje nowy wiersz w tabeli.
     * @param id id produktu.
     * @param rodzaj rodzaj produktu.
     * @param nazwa nazwa produktu.
     * @param cena cena produktu.
     * @param cenaPromocyjna cena promocyjna produktu (jeśli aktywna).
     */
    public static void dodajWiersz(int id, String rodzaj, String nazwa, float cena, float cenaPromocyjna){  
        String promocja = "brak";
        if (cenaPromocyjna > 0) promocja = Float.toString(cenaPromocyjna) + " zł";
        Object[] wiersz = { id, rodzaj, nazwa, cena + " zł", promocja };
        model.addRow(wiersz);          
    }
    
    /**
     * Metoda edytuje istniejący wiersz w tabeli.
     * @param id id produktu.
     * @param nazwa nazwa produktu.
     * @param cena cena produktu.
     * @param cenaPromocyjna cena promocyjna produktu (jeśli aktywna).
     */
    public static void edytujWiersz(int id, String nazwa, float cena, float cenaPromocyjna){
        String promocja = "brak";
        if (cenaPromocyjna > 0) promocja = Float.toString(cenaPromocyjna) + " zł";
        int nr_wiersza = szukajWiersz(id);
        model.setValueAt(nazwa, nr_wiersza, 2);
        model.setValueAt(cena + " zł", nr_wiersza, 3);
        model.setValueAt(promocja, nr_wiersza, 4);
    }
    
    /**
     * Metoda usuwa produkt z kolekcji, usuwając również wiersz z tabeli, 
     * zdjęcie z folderu tymczasowego oraz id produktu z listy wszystkich id.
     * @param id id usuwanego produktu. 
     */
    public static void usunProdukt(int id){
        usunID(id);
        produkty.remove(id); 
        usunWiersz(id); 
        usunZdjecie(id);
    }
    
    /**
     * Metoda usuwa zdjęcie produktu z folderu tymczasowego.
     * @param id id produktu którego zdjęcie jest usuwane.
     */
    public static void usunZdjecie(int id){ 
        //Usuniecie zdjecia produktu (z katalogu temp)
        String sciezka = new File("").getAbsolutePath()+"/temp/"; 
        File file = new File(sciezka+id+".jpg");  
        if (file.exists()) {
            file.delete();            
            System.out.println("Usunięto zdjęcie: " + file.getAbsolutePath());
        }  
    }
    
    /**
     * Metoda wywołuje metodę czyscFolder przekazują jako argument ścieżkę do folderu tymczasowego.
     */
    public static void czyscTemp(){
        String sciezka = new File("").getAbsolutePath()+"/temp/"; 
        czyscFolder(sciezka);
    }
    
    /**
     * Metoda usuwa zawartość folderu podanego jako argument.
     * @param sciezka ścieżka do folderu którego zawartość zostanie usunięta.
     */
    public static void czyscFolder(String sciezka){
        //Wyczyszczenie zawartosci folderu ze zdjęciami        
        File dir = new File(sciezka); 
        if (dir.exists()) {
            String[] zawartosc = dir.list();
            for(String s: zawartosc){
                File currentFile = new File(dir.getPath(),s);
                currentFile.delete();
            }            
            System.out.println("Wyczyszczono katalog "+sciezka+".");
        } 
    }
    
    /**
     * Metoda usuwa z tabeli wiersz z produktem o podanym id.
     * @param id id produktu którego wiersz zostanie usunięty. 
     */
    private static void usunWiersz(int id){
        model.removeRow(szukajWiersz(id));
    }
    
    /**
     * Metoda szuka numer indexu wiersza w tabeli w którym umieszczony jest produkt o podanym id.
     * @param szukaneID id produktu którego szukamy w tabeli.
     * @return numer indexu wiersza który zawiera produkt o podanym id.
     */
    public static int szukajWiersz(int szukaneID){
        int index;
        int id;
        for (index = 0; index < model.getRowCount(); index++){
            id = Integer.parseInt(String.valueOf(model.getValueAt(index, 0)));
            if (id == szukaneID){
                break;
            }
        }
        return index;
    }
    
    /**
     * Metoda generuje id o najmniejszym dostępnym numerze.
     * @return zwraca wygenerowane id.
     */
    public int generujID() { 
        //Generator ID
        int wygenerowaneID = 0;
        if (listaID.isEmpty() == true){
            listaID.add(true);            
            return 0;
        } 
        
        for (int index = 0; index < listaID.size(); index++) {
            if (listaID.get(index) == false){
                listaID.set(index, true);
                wygenerowaneID = index;
                break;
            }
            if (index == (listaID.size()-1)){
                listaID.add(true);
                wygenerowaneID = index+1;
                break;
            }
        }  
        return wygenerowaneID;
    }
    
    /**
     * Metoda usuwa id z listy wszystkich id.
     * @param removeID id które zostanie usunięte.
     */
    public static void usunID(int removeID) {
        listaID.set(removeID, false);        
    }
    
    private void obuwieMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_obuwieMenuItemActionPerformed
        // TODO add your handling code here:
        //Dodaj Obuwie        
        if (oknoProduktu == null) oknoProduktu = new Dodaj(generujID(), new Obuwie(), Dodaj.Tryb.DODAWANIE);
    }//GEN-LAST:event_obuwieMenuItemActionPerformed

    private void spodnieMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spodnieMenuItemActionPerformed
        // TODO add your handling code here:
        //Dodaj Spodnie
        if (oknoProduktu == null) oknoProduktu = new Dodaj(generujID(), new Spodnie(), Dodaj.Tryb.DODAWANIE);
    }//GEN-LAST:event_spodnieMenuItemActionPerformed

    private void tshirtMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tshirtMenuItemActionPerformed
        // TODO add your handling code here:
        //Dodaj T-Shirt
        if (oknoProduktu == null) oknoProduktu = new Dodaj(generujID(), new Tshirt(), Dodaj.Tryb.DODAWANIE);
    }//GEN-LAST:event_tshirtMenuItemActionPerformed

    private void eleganckaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eleganckaMenuItemActionPerformed
        // TODO add your handling code here:
        //Dodaj Koszulę Elegancką
        if (oknoProduktu == null) oknoProduktu = new Dodaj(generujID(), new Elegancka(), Dodaj.Tryb.DODAWANIE);
    }//GEN-LAST:event_eleganckaMenuItemActionPerformed

    private void kurtkaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kurtkaMenuItemActionPerformed
        // TODO add your handling code here:
        //Dodaj Kurtkę
        if (oknoProduktu == null) oknoProduktu = new Dodaj(generujID(), new Kurtka(), Dodaj.Tryb.DODAWANIE);
    }//GEN-LAST:event_kurtkaMenuItemActionPerformed

    private void otworzMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otworzMenuItemActionPerformed
        // TODO add your handling code here:
        //Wczytaj produkty
        FileNameExtensionFilter filter = new FileNameExtensionFilter("XML files", "xml");
        jFileChooserOtwórz.setCurrentDirectory(new File("."));
        jFileChooserOtwórz.setFileFilter(filter);
        jFileChooserOtwórz.setDialogTitle("Wczytaj z pliku XML");    
        int userSelection = jFileChooserOtwórz.showOpenDialog(this);
        if (userSelection == jFileChooserOtwórz.APPROVE_OPTION){
            wczytajProdukty();   
        }
    }//GEN-LAST:event_otworzMenuItemActionPerformed

    private void zapiszMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zapiszMenuItemActionPerformed
        // TODO add your handling code here:  
        //Zapisz produkty
        FileNameExtensionFilter filter = new FileNameExtensionFilter("XML files", "xml");
        jFileChooserZapisz.setCurrentDirectory(new File("."));
        jFileChooserZapisz.setFileFilter(filter);
        jFileChooserZapisz.setDialogTitle("Zapisz do pliku XML");    
        int userSelection = jFileChooserZapisz.showSaveDialog(this);
        if (userSelection == jFileChooserZapisz.APPROVE_OPTION) {        
            zapiszProdukty();
        }
    }//GEN-LAST:event_zapiszMenuItemActionPerformed

    private void edytujMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edytujMenuItemActionPerformed
        // TODO add your handling code here:
        //Edytuj zaznaczone
        edytujProdukt();  
    }//GEN-LAST:event_edytujMenuItemActionPerformed

    private void edytujProdukt() {
        int index = jTable1.getSelectedRow();
        if (index >= 0){
            int id = Integer.parseInt(String.valueOf(model.getValueAt(index, 0)));
            Produkt p = Zalando.getProdukty().get(id);
            if (oknoProduktu == null){
                if (p instanceof Obuwie) oknoProduktu = new Dodaj(id, (Obuwie) p, Dodaj.Tryb.EDYTOWANIE);
                if (p instanceof Spodnie) oknoProduktu = new Dodaj(id, (Spodnie) p, Dodaj.Tryb.EDYTOWANIE);
                if (p instanceof Tshirt) oknoProduktu = new Dodaj(id, (Tshirt) p, Dodaj.Tryb.EDYTOWANIE);
                if (p instanceof Elegancka) oknoProduktu = new Dodaj(id, (Elegancka) p, Dodaj.Tryb.EDYTOWANIE);
                if (p instanceof Kurtka) oknoProduktu = new Dodaj(id, (Kurtka) p, Dodaj.Tryb.EDYTOWANIE);
            }
        }
    }

    private void usunMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usunMenuItemActionPerformed
        // TODO add your handling code here:
        //Usuń zaznaczone
        int index = jTable1.getSelectedRow();        
        if (index >= 0){
            int id = Integer.parseInt(String.valueOf(model.getValueAt(index, 0)));
            usunProdukt(id);
        } 
    }//GEN-LAST:event_usunMenuItemActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        //Edytuj kliknięte
        if (evt.getClickCount() == 2) edytujProdukt(); 
    }//GEN-LAST:event_jTable1MouseClicked

    private void szukajMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_szukajMenuItemActionPerformed
        // TODO add your handling code here:
        //Szukaj po nazwie
        if (wyszukiwarka == null) wyszukiwarka = new Szukaj();
    }//GEN-LAST:event_szukajMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        //Czyszczenie katalogu temp przy zamykaniu programu
        String ObjButtons[] = {"Tak","Nie", "Anuluj"};
        int PromptResult = JOptionPane.showOptionDialog(null,"Czy chcesz zapisać przed zamknięciem?","Zamykanie aplikacji."
                ,JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,ObjButtons,ObjButtons[0]);
        
        if(PromptResult == JOptionPane.YES_OPTION){
            zapiszMenuItem.doClick();           
        } else if (PromptResult == JOptionPane.NO_OPTION){
            czyscTemp();
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Zalando.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Zalando.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Zalando.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Zalando.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Zalando().setVisible(true);              
            }
        });       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu dodajMenu;
    private javax.swing.JMenu edytujMenu;
    private javax.swing.JMenuItem edytujMenuItem;
    private javax.swing.JMenuItem eleganckaMenuItem;
    private javax.swing.JDialog jDialog1;
    private static javax.swing.JFileChooser jFileChooserOtwórz;
    private static javax.swing.JFileChooser jFileChooserZapisz;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    private javax.swing.JMenu koszuleMenu;
    private javax.swing.JMenuItem kurtkaMenuItem;
    private javax.swing.JMenuItem obuwieMenuItem;
    private javax.swing.JMenuItem otworzMenuItem;
    private javax.swing.JMenu plikMenu;
    private javax.swing.JMenuItem spodnieMenuItem;
    private javax.swing.JMenu szukajMenu;
    private javax.swing.JMenuItem szukajMenuItem;
    private javax.swing.JMenuItem tshirtMenuItem;
    private javax.swing.JMenuItem usunMenuItem;
    private javax.swing.JMenuItem zapiszMenuItem;
    // End of variables declaration//GEN-END:variables

    //Gettery i Settery

    /**
     * Zwraca zmienną referencyjną na otwarte okno produktu.
     * @return zmienna referencyjną na otwarte okno produktu.
     */
    public static Dodaj getOknoProduktu() {
        return oknoProduktu;
    }

    /**
     * Ustawia zmienną referencyjną okna produktu.
     * Wykorzystywane do blokady otwarcia kilkukrotnie okna produktu.
     * Okno produktu utworzy się tylko gdy zmienna referencyjna ma wartość null.
     * @param oknoProduktu zmienna referencyjna na okno produktu.
     */
    public static void setOknoProduktu(Dodaj oknoProduktu) {
        Zalando.oknoProduktu = oknoProduktu;
    }

    /**
     * Metoda dodaje produkt do mapy wszystkich produktów.
     * @param id klucz mapy (id produktu).
     * @param produkt obiekt produkt.
     */
    public static void dodajProdukt(int id, Produkt produkt) {
        produkty.put(id, produkt);
    }

    /**
     * Metoda zwraca zmienną referencyjną na mapę wszystkich produktów.
     * @return zmienna referencyjna na mapę wszystkich produktów.
     */
    public static HashMap<Integer, Produkt> getProdukty() {
        return produkty;
    }

    /**
     * Ustawia zmienną referencyjną okna wyszukiwarki.
     * Wykorzystywane do blokady otwarcia kilkukrotnie okna wyszukiwarki.
     * Okno wyszukiwarki utworzy się tylko gdy zmienna referencyjna ma wartość null.
     * @param wyszukiwarka zmienna referencyjna na okno wyszukiwarki.
     */
    public static void setWyszukiwarka(Szukaj wyszukiwarka) {
        Zalando.wyszukiwarka = wyszukiwarka;
    }
}